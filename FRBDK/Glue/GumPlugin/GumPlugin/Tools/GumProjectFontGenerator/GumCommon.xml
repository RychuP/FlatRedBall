<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GumCommon</name>
    </assembly>
    <members>
        <member name="M:GumRuntime.ElementSaveExtensions.ApplyVariableReferences(Gum.Wireframe.GraphicalUiElement,Gum.DataTypes.Variables.StateSave)">
            <summary>
            Loops through all variable references in the argument graphicalUiElement, evaluates them, then applies the evlauated value to the
            owner of each variable reference.
            </summary>
            <param name="graphicalElement">The top level owner for which to apply variables.</param>
            <param name="stateSave">The current state, such as the argument graphicalElement's default state</param>
        </member>
        <member name="M:GumRuntime.ElementSaveExtensions.ApplyVariableReferencesOnSpecificOwner(Gum.Wireframe.GraphicalUiElement,System.String,Gum.DataTypes.Variables.StateSave)">
            <summary>
            Evaluates the reference string (such as X = SomeOtherItem.X), applying the right side to the left side.
            </summary>
            <param name="referenceOwner">The owner that owns the variable reference, such as the instance.</param>
            <param name="referenceString">The string such as "X = SomeItem.X"</param>
            <param name="stateSave">The state save which owns the variable reference.</param>
        </member>
        <member name="T:Gum.Wireframe.InteractiveGue">
            <summary>
            The base object for all Gum runtime objects. It contains functionality for
            setting variables, states, and performing layout. The GraphicalUiElement can
            wrap an underlying rendering object.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.Click">
            <summary>
            Event which is raised whenever this is clicked by a cursor. A click occurs
            when the cursor is over this and is first pushed, then released.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.Push">
            <summary>
            Event shich is raised whenever this is pushed by a cursor. A push occurs
            when the cursor is over this and the left mouse button is pushed (not down last frame,
            down this frame).
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.LosePush">
            <summary>
            Event which is raised whenever this loses a push. A push occurs when the
            cursor is over this window and the left mouse button is pushed. A push is lost
            if the left mouse button is released or if the user moves the cursor so that it
            is no longer over this while the mouse button is pressed. 
            </summary>
            <remarks>
            LosePush is often used to change the state of a button back to its regular state.
            </remarks>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.RollOn">
            <summary>
            Event raised when the cursor first moves over this object.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.RollOff">
            <summary>
            Event when the cursor first leaves this object.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.RollOver">
            <summary>
            Event raised every frame the cursor is over this object.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.Dragging">
            <summary>
            Event raised when the cursor pushes on an object and moves. This is similar to RollOver, but is raised even
            if outside of the bounds of the object.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.MouseWheelScroll">
            <summary>
            Eent raised when the mouse wheel has been scrolled while the cursor is over this instance.
            This event is raised bottom-up, with the root object having the opportunity to handle the roll over.
            If a control sets the argument RoutedEventArgs Handled to true, the children objects 
            will not have this event raised.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.RollOverBubbling">
            <summary>
            Event raised when the mouse rolls over this instance. This event is raised top-down, with the
            child object having the opportunity to handle the roll over first. If a control sets the argument 
            RoutedEventArgs Handled to true,
            then parent objects will not have this event raised.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.InteractiveGue.RemovedAsPushed">
            <summary>
            Event raised when this Window is pushed, then is no longer the pushed window due to a cursor releasing the primary button.
            </summary>
        </member>
        <member name="M:Gum.Wireframe.IInputReceiver.OnGainFocus">
            <summary>
            Called by the engine automatically when an IInputReceiver gains focus.
            </summary>
            <remarks>
            The implementation of this method should raise the GainFocus event.
            </remarks>
        </member>
        <member name="M:Gum.Wireframe.IInputReceiver.OnLoseFocus">
            <summary>
            Called by the engine automatically when an IInputReceiver loses focus.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.ICursor.PrimaryClickNoSlide">
            <summary>
            Returns whether the cursor has been clicked without movement between the push and release.
            Simple implementations can return PrimaryClick, but more complex implementations may want to
            consider a movement threshold.
            </summary>
        </member>
        <member name="T:Gum.Wireframe.GraphicalUiElement">
            <summary>
            The base object for all Gum runtime objects. It contains functionality for
            setting variables, states, and performing layout. The GraphicalUiElement can
            wrap an underlying rendering object.
            </summary>
        </member>
        <member name="F:Gum.Wireframe.GraphicalUiElement.mWhatThisContains">
            <summary>
            A flat list of all GraphicalUiElements contained by this element. For example, if this GraphicalUiElement
            is a Screen, this list is all GraphicalUielements for every instance contained regardless of hierarchy.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.EffectiveManagers">
            <summary>
            Returns this instance's SystemManagers, or climbs up the parent/child relationship
            until a non-null SystemsManager is found. Otherwise, returns null.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.CanvasWidth">
            <summary>
            The X "world units" that the entire gum rendering system uses. This is essentially the "top level" container's width.
            For a game which renders at 1:1, this will match the game's resolution. 
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.CanvasHeight">
            <summary>
            The Y "world units" that the entire gum rendering system uses. This is essentially the "top level" container's height.
            For a game which renders at 1:1, this will match the game's resolution. 
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.RenderingLibrary#IPositionedSizedObject#X">
            <summary>
            The X position of this object as an IPositionedSizedObject. This does not consider origins
            so it will use the default origin, which is top-left for most types.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.RenderingLibrary#IPositionedSizedObject#Y">
            <summary>
            The Y position of this object as an IPositionedSizedObject. This does not consider origins
            so it will use the default origin, which is top-left for most types.
            </summary>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetAbsoluteWidth">
            <summary>
            Returns the absolute width of the GraphicalUiElement in pixels (as opposed to using its WidthUnits)
            </summary>
            <returns>The absolute width in pixels.</returns>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetAbsoluteHeight">
            <summary>
            Returns the absolute height of the GraphicalUiElement in pixels (as opposed to using its HeightUnits)
            </summary>
            <returns>The absolute height in pixels.</returns>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.StackSpacing">
            <summary>
            The number of pixels spacing between each child if this is has a ChildrenLayout of 
            TopToBottomStack or LeftToRightStack.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.Rotation">
            <summary>
            Rotation in degrees. Positive value rotates counterclockwise.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.ElementGueContainingThis">
            <summary>
            The ScreenSave or Component which contains this instance.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.ContainedElements">
            <summary>
            A flat list of all GraphicalUiElements contained by this element. For example, if this GraphicalUiElement
            is a Screen, this list is all GraphicalUielements for every instance contained regardless of hierarchy.
            </summary>
            <remarks>
            Since this is an interface using ContainedElements in a foreach allocates memory
            and this can actually be significant in a game that updates its UI frequently.
            </remarks>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.Children">
            <summary>
            Returns the direct hierarchical children of this. Note that this does not return all objects contained in the element, only direct children. 
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.AbsoluteX">
            <summary>
            Returns the absolute (screen space) X of the origin of the GraphicalUiElement. Note that
            this considers the XOrigin, and will apply rotation.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.AbsoluteLeft">
            <summary>
            Returns the absolute X (in screen space) of the left edge of the GraphicalUielement.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.AbsoluteY">
            <summary>
            Returns the absolute Y (screen space) of the origin of the GraphicalUiElement. Note that
            this considers the YOrigin, and will apply rotation
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.AbsoluteTop">
            <summary>
            Returns the absolute Y (in screen space) of the top edge of the GraphicalUiElement.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureTop">
            <summary>
            The pixel coorinate of the top of the displayed region.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureLeft">
            <summary>
            The pixel coorinate of the left of the displayed region.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureWidth">
            <summary>
            The pixel width of the source rectangle on the referenced texture.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.TextureHeight">
            <summary>
            The pixel height of the source rectangle on the referenced texture.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.Wrap">
            <summary>
            Whether the texture address should wrap.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.WrapsChildren">
            <summary>
            Whether contained children should wrap. This only applies if ChildrenLayout is set to 
            ChildrenLayout.LeftToRightStack or ChildrenLayout.TopToBottomStack.
            </summary>
        </member>
        <member name="P:Gum.Wireframe.GraphicalUiElement.ClipsChildren">
            <summary>
            Whether the rendering of this object's children should be clipped to the bounds of this object. If false
            then children can render outside of the bounds of this object.
            </summary>
        </member>
        <member name="E:Gum.Wireframe.GraphicalUiElement.SizeChanged">
            <summary>
            Event raised whenever this instance's absolute size changes. This size change can occur by a direct value being
            set (such as Width or WidthUnits), or by an indirect value changing, such as if a Parent is resized and if
            this uses a WidthUnits depending on the parent.
            </summary>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.SetInitialState">
            <summary>
            Sets the default state.
            </summary>
            <remarks>
            This function is virtual so that derived classes can override it
            and provide a quicker method for setting default states
            </remarks>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.AddToManagers(RenderingLibrary.ISystemManagers,RenderingLibrary.Graphics.Layer)">
            <summary>
            Adds this as a renderable to the SystemManagers on the argument layer if not already added
            to SystemManagers. If already added
            this does not perform any operations - it can be safely called multiple times, but
            calling it multiple times will not move this to a different layer.
            </summary>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetGraphicalUiElementByName(System.String)">
            <summary>
            Searches for and returns a GraphicalUiElement in this instance by name. Returns null
            if not found.
            </summary>
            <param name="name">The case-sensitive name to search for.</param>
            <returns>The found GraphicalUiElement, or null if no match is found.</returns>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.GetGraphicalUiElementByName(System.String[])">
            <summary>
            Performs a recursive search for graphical UI elements, where eacn name in the parameters
            is the name of a GraphicalUiElement one level deeper than the last.
            </summary>
            <param name="names">The names to search for, allowing retrieval multiple levels deep.</param>
            <returns>The found element, or null if no match is found.</returns>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.SetProperty(System.String,System.Object)">
            <summary>
            Sets a variable on this object (such as "X") to the argument value
            (such as 100.0f). This can be a primitive property like Height, or it can be
            a state.
            </summary>
            <param name="propertyName">The name of the variable on this object such as X or Height. If the property is a state, then the name should be "{CategoryName}State".</param>
            <param name="value">The value, casted to the correct type.</param>
        </member>
        <member name="M:Gum.Wireframe.GraphicalUiElement.AnimateSelf(System.Double)">
            <summary>
            Performs AnimationChain (.achx) animation on this and all children recurisvely.
            This is typically called on the top-level object (usually Screen) when Gum is running
            in a game.
            </summary>
        </member>
        <member name="T:Gum.Wireframe.ElementWithState">
            <summary>
            Represents an element with state and optional instance which can be used in a list to define the instance 
            path from a screen down to the instance used to get variables recursively.
            </summary>
            <example>
            A stack of elements may be as follows:
            * MainPage.MainMenuInstance
            * MainMenu.CancelButtonInstance
            * StandardButton.TextInstance
            * Text
            </example>
        </member>
        <member name="P:Gum.Managers.TypedElementReference.ReferencingObject">
            <summary>
            The object that is doing the referencing. This could be an InstanceSave, a VariableSave, a VariableListSave, or a BehaviorReference.
            </summary>
        </member>
        <member name="F:Gum.Managers.ObjectFinder.cachedDictionary">
            <summary>
            Provides quick access to Gum objects by name. Elements do not prefix their type
            so a Screen would be "MainScreen" rather than "Screens/MainScreen"
            </summary>
        </member>
        <member name="M:Gum.Managers.ObjectFinder.GetScreen(System.String)">
            <summary>
            Returns the ScreenSave with matching name in the current glue project. Case is ignored when making name comparisons
            </summary>
            <param name="screenName"></param>
            <returns></returns>
        </member>
        <member name="M:Gum.Managers.ObjectFinder.GetElementSave(Gum.DataTypes.InstanceSave)">
            <summary>
            Returns the ElementSave (Screen, Component, or Standard Element) for the argument instance
            </summary>
            <param name="instance">The instance to find the matching element for</param>
            <returns>The matching ElementSave, or null if none is found</returns>
        </member>
        <member name="M:Gum.Managers.ObjectFinder.GetElementSave(System.String)">
            <summary>
            Returns the ElementSave (Screen, Component, or Standard Element) for the argument elementName
            </summary>
            <param name="elementName">The name of the ElementSave to search for</param>
            <returns>The matching ElementSave, or null if none is found</returns>
        </member>
        <member name="M:Gum.Managers.ObjectFinder.GetElementsReferencing(Gum.DataTypes.ElementSave,System.Collections.Generic.List{Gum.DataTypes.ElementSave},System.Collections.Generic.List{Gum.DataTypes.InstanceSave})">
            <summary>
            Returns a list of Elements that include InstanceSaves that use the argument
            elementSave as their BaseType, or that use an ElementSave deriving from elementSave
            as their BaseType.
            </summary>
            <param name="elementSave">The ElementSave to search for.</param>
            <returns>A List containing all Elements</returns>
        </member>
        <member name="M:Gum.Managers.ObjectFinder.GetBaseElements(Gum.DataTypes.ElementSave)">
            <summary>
            Returns a list of ElementSaves inheriting from the argument elementSave, with the most derived first in the list, and the most base last in the list
            </summary>
            <param name="elementSave">The element for which to get the inheritance list.</param>
            <returns>The list, with the most derived (direct inheritance) first.</returns>
        </member>
        <member name="M:Gum.Managers.ObjectFinder.GetRootVariable(System.String,Gum.DataTypes.InstanceSave)">
            <summary>
            Returns the root variable (defined on the standard element usually) for the argument instance.
            </summary>
            <param name="name">The name, including the period such as "InstanceName.X"</param>
            <param name="instance">The instance, which should match the instance in the variable name.</param>
            <returns>The root VariableSave</returns>
        </member>
        <member name="M:Gum.DataTypes.GumProjectSaveExtensionMethods.Initialize(Gum.DataTypes.GumProjectSave)">
            <summary>
            Initializes the GumProjectSave for editing in Gum.  This means
            adding any variables that are necessary, fixing enumerations, and
            checking for other errors.
            </summary>
            <param name="gumProjectSave">The GumProjectSave</param>
        </member>
        <member name="M:Gum.DataTypes.GumProjectSaveExtensionMethods.AddNewStandardElementTypes(Gum.DataTypes.GumProjectSave)">
            <summary>
            Adds any Standard Elements that have been created since the project was last saved.  This should be called
            when the project is first loaded.
            </summary>
            <param name="gumProjectSave">The gum project to add to</param>
        </member>
        <member name="T:Gum.DataTypes.RecursiveVariableFinder">
            <summary>
            Class that can find variables
            and values recursively.  There's
            so many different ways that this
            happens that this consolidates all
            logic in one place
            </summary>
        </member>
        <member name="M:Gum.DataTypes.RecursiveVariableFinder.GetValueByBottomName(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the value of the variable from the bottom of the stack by climbing back up to find the most derived assignment
            </summary>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.Initialize(Gum.DataTypes.Variables.StateSave)">
            <summary>
            Fixes enumeration values and sorts all variables alphabetically
            </summary>
            <param name="stateSave">The state to initialize.</param>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.GetValueRecursive(Gum.DataTypes.Variables.StateSave,System.String)">
            <summary>
            Returns the value of the variable name from this state. If not found, will follow inheritance to find 
            the value from the base.
            </summary>
            <param name="stateSave">The state in the current element.</param>
            <param name="variableName">The variable name</param>
            <returns>The value found recursively, where the most-derived value has priority.</returns>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.GetVariableRecursive(Gum.DataTypes.Variables.StateSave,System.String)">
            <summary>
            Returns the first instance of an existing VariableSave recursively. 
            </summary>
            <param name="stateSave">The possible state that contains the variable. If it doesn't, then the code will recursively go to base types.</param>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.AssignVariableSave(Gum.DataTypes.Variables.StateSave,System.String,System.Object,Gum.DataTypes.InstanceSave,System.String,System.Boolean)">
            <summary>
            Assigns a value to a variable.  If the variable doesn't exist then the variable is instantiated, then the value is assigned.
            </summary>
            <param name="stateSave">The StateSave that contains the variable.  The variable will be added to this StateSave if it doesn't exist.</param>
            <param name="variableName">The name of the variable to look for.</param>
            <param name="value">The value to assign to the variable.</param>
            <param name="instanceSave">The instance that owns this variable.  This may be null.</param>
            <param name="variableType">The type of the variable.  This is only needed if the value is null.</param>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.Merge(Gum.DataTypes.Variables.StateSave,Gum.DataTypes.Variables.StateSave,System.Single,System.Collections.Generic.List{Gum.DataTypes.Variables.VariableSaveValues})">
            <summary>
            Merges two states into a list of VariableSaveValues. This is an efficient way to perform state interpolation.
            </summary>
            <param name="firstState">The first state.</param>
            <param name="secondState">The second state.</param>
            <param name="secondRatio">The ratio of the second state. This value should be between 0 and 1.</param>
            <param name="mergedValues">The resulting values.</param>
            <exception cref="T:System.ArgumentNullException">If either of the argument states are null.</exception>
        </member>
        <member name="M:Gum.DataTypes.Variables.StateSaveExtensionMethods.GetValueConsideringInterpolation(System.Object,System.Object,System.Single)">
            <summary>
            Returns a value that is the interpolation between the first and second values if the value is cast as an object. The value must ultimately be a numeric value.
            </summary>
            <param name="firstValue">The first value as a numeric value.</param>
            <param name="secondValue">The second value as a numeric value.</param>
            <param name="interpolationValue">A value between 0 and 1. A value of 0 returns the firstValue. A value of 1 returns the second value.</param>
            <returns>The resulting interpolated value, matching the type of the arguments.</returns>
        </member>
        <member name="M:Gum.DataTypes.VariableSaveExtensionMethods.FixEnumerations(Gum.DataTypes.Variables.VariableSave)">
            <summary>
            Converts integer values to their corresponding enumeration values. This should be called
            after variable saves are loaded from XML.
            </summary>
            <param name="variableSave">The VariableSave to fix.</param>
            <returns>Whether any changes were made.</returns>
        </member>
        <member name="M:RenderingLibrary.Graphics.IRenderable.PreRender">
            <summary>
            Perform logic which needs to occur before a SpriteBatch has been started
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.ITextureCoordinate.SourceRectangle">
            <summary>
            The rectangle defining the source on the texture.  If null, the entire texture is used. Values are in pixels.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.ITextureCoordinate.Wrap">
            <summary>
            Whether to wrap when the SourceRectangle is larger than the texture. 
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.ITextureCoordinate.TextureWidth">
            <summary>
            The width of the texture in pixels. Null if no texture is assigned.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.ITextureCoordinate.TextureHeight">
            <summary>
            The height of the texture in pixels. Null if no texture is assigned.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.ITextureCoordinate.FlipHorizontal">
            <summary>
            Whether to flip the sprite horizontally.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.LayerCameraSettings.IsInScreenSpace">
            <summary>
            Whether the current layer is in Screen Space. If true, then the Camera position does
            not impact the position of objects on this layer.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Layer.LayerCameraSettings">
            <summary>
            Contains values which the Layer can use to override the camera settings.
            By default this is null, which means the Layer uses the camera settings. 
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.Layer.SortRenderables">
            <summary>
            This is a stable sort on Z.  It's incredibly fast on already-sorted lists so we'll do this over something like the built-in 
            binary sorts that .NET offers.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Camera.Zoom">
            <summary>
            The zoom value for everything on this camera. Default value of 1.
            A value of 2 will make everything appear twice as large.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Math.MathFunctions.RoundToInt(System.Single)">
            <summary>
            Rounds the float to the nearest int, using MidpointRounding.AwayFromZero.
            </summary>
            <param name="floatToRound">The float to round.</param>
            <returns>The rounded int.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the float is NaN (not a number)</exception>
        </member>
        <member name="M:RenderingLibrary.Math.MathFunctions.RotatePointAroundPoint(System.Drawing.Point,System.Drawing.Point@,System.Single)">
            <summary>
            Rotates a Point around another Point by a given number of radians.
            </summary>
            <param name="basePoint">Point to rotate around.</param>
            <param name="pointToRotate">Point to rotate (changes position).</param>
            <param name="radiansToChangeBy">Radians to rotate by.</param>
        </member>
        <member name="M:RenderingLibrary.Math.MathFunctions.RotateVector(System.Numerics.Vector2@,System.Single)">
            <summary>
            Rotates (and modifies) the argument vector2 by the argument radians, where a positive value is clockwise.
            </summary>
            <param name="vector2">The vector to rotate.</param>
            <param name="radians">The radians to rotate counterclockwise.</param>
        </member>
        <member name="M:RenderingLibrary.IPositionedSizedObjectExtensionMethods.GetAbsoluteX(RenderingLibrary.Graphics.IRenderableIpso)">
            <summary>
            Returns the top-left world X coordinate of the argument RenderableIpso in screen space.
            </summary>
            <param name="ipso">The RenderableIpso to return the value for.</param>
            <returns>The world X coordinate.</returns>
        </member>
        <member name="M:RenderingLibrary.IPositionedSizedObjectExtensionMethods.GetAbsoluteY(RenderingLibrary.Graphics.IRenderableIpso)">
            <summary>
            Returns the world Y coordinate of the argument RenderableIpso in screen space.
            </summary>
            <param name="ipso">The RenderableIpso to return the value for.</param>
            <returns>The world Y coordinate.</returns>
        </member>
        <member name="M:RenderingLibrary.IPositionedSizedObjectExtensionMethods.GetAbsoluteRotation(RenderingLibrary.Graphics.IRenderableIpso)">
            <summary>
            Returns the absolute rotation in degrees.
            </summary>
            <param name="ipso">The object for which to return rotation.</param>
            <returns>The rotation in degrees.</returns>
        </member>
    </members>
</doc>
