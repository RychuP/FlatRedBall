<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToolsUtilitiesStandard</name>
    </assembly>
    <members>
        <member name="T:ToolsUtilities.FileManager">
            <summary>
            Utility class used to help dealing with files.
            </summary>
            <remarks>
            This code is a copy of code from FlatRedBall.  It's ok,
            Victor Chelaru wrote that code and he's the one who put it in here.
            </remarks>
        </member>
        <member name="M:ToolsUtilities.FileManager.GetExtension(System.String)">
            <summary>
            Returns the extension in a filename.
            </summary>
            <remarks>
            The extension returned will not contain a period.
            
            <para>
            <code>
            // this code will return a string containing "png", not ".png"
            FileManager.GetExtension(@"FolderName/myImage.png");
            </code>
            </para>
            </remarks>
            <param name="fileName">The filename.</param>
            <returns>Returns the extension or an empty string if no period is found in the filename.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.RemoveExtension(System.String)">
            <summary>
            Returns the fileName without an extension, or makes no changes if fileName has no extension.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The file name with extension removed if an extension existed.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.RemovePath(System.String@)">
            <summary>
            Modifies the fileName by removing its path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name to change</param>
        </member>
        <member name="M:ToolsUtilities.FileManager.RemovePath(System.String)">
            <summary>
            Returns the fileName without a path, or makes no changes if the fileName has no path.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The modified fileName if a path is found.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.GetAllFilesInDirectory(System.String,System.String)">
            <summary>
            Returns a List containing all files which match the fileType argument which are 
            in the directory argument or a subfolder.  This recurs, returning all files.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="M:ToolsUtilities.FileManager.GetAllFilesInDirectory(System.String,System.String,System.Int32)">
            <summary>
            Returns a List containing all files which match the fileType argument which are within
            the depthToSearch folder range relative to the directory argument.
            </summary>
            <param name="directory">String representing the directory to search.  If an empty
            string is passed, the method will search starting in the directory holding the .exe.</param>
            <param name="fileType">The file type to search for specified as an extension.  The extension
            can either have a period or not.  That is ".jpg" and "jpg" are both valid fileType arguments.  An empty
            or null value for this parameter will return all files regardless of file type.</param>
            <param name="depthToSearch">The depth to search through.  If the depthToSearch
            is 0, only the argument directory will be searched. To search infinte depth, use int.MaxValue</param>
            <returns>A list containing all of the files found which match the fileType.</returns>
        </member>
        <member name="P:ToolsUtilities.FileManager.UserApplicationDataForThisApplication">
            <summary>
            Returns a full path for a folder which can be used to save user data. 
            </summary>
            <example>
            System.IO.File.SaveText("File Contents", FlatRedBall.UserApplicationDataForThisApplication + "File.txt");
            </example>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.GetIntAfter(System.String,System.String)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor in whereToSearch.
            </summary>
            <remarks>
            This method is used to help simplify parsing of text files and data strings.
            If stringToSearchFor is "Y:" and whereToSearch is "X: 30, Y:32", then the value
            of 32 will be returned.
            </remarks>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <returns>The integer value found after the argument stringToSearchFor.</returns>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.GetIntAfter(System.String,System.String,System.Int32)">
            <summary>
            Returns the first integer found after the argument stringToSearchFor.  The search begins
            at the argument startIndex.
            </summary>
            <param name="stringToSearchFor">The string pattern to search for.</param>
            <param name="whereToSearch">The string that will be searched.</param>
            <param name="startIndex">The index to begin searching at.  This method
            will ignore any instances of stringToSearchFor which begin at an index smaller
            than the argument startIndex.</param>
            <returns></returns>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.IncrementNumberAtEnd(System.String)">
            <summary>
            Increments the number at the end of a string or adds a number if none exists.
            </summary>
            <remarks>
            This method begins looking at the end of a string for numbers and moves towards the beginning of the string
            until it encounters a character which is not a numerical digit or the beginning of the string.  "Sprite123" would return
            "Sprite124", and "MyString" would return "MyString1".
            </remarks>
            <param name="originalString">The string to "increment".</param>
            <returns>Returns a string with the number at the end incremented, or with a number added on the end if none existed before.</returns>
        </member>
        <member name="M:ToolsUtilities.StringFunctions.InsertSpacesInCamelCaseString(System.String)">
            <summary>
            Inserts spaces before every capital letter in a camel-case
            string.  Ignores the first letter.
            </summary>
            <remarks>
            For example "HelloThereIAmCamelCase" becomes
            "Hello There I Am Camel Case".
            </remarks>
            <param name="originalString">The string in which to insert spaces.</param>
            <returns>The string with spaces inserted.</returns>
        </member>
        <member name="M:ToolsUtilitiesStandard.Helpers.MathHelper.ToRadians(System.Single)">
            <summary>Converts degrees to radians.</summary>
            <param name="degrees">The angle in degrees.</param>
        </member>
        <member name="M:ToolsUtilitiesStandard.Helpers.MathHelper.ToDegrees(System.Single)">
            <summary>Converts radians to degrees.</summary>
            <param name="radians">The angle in radians.</param>
        </member>
    </members>
</doc>
