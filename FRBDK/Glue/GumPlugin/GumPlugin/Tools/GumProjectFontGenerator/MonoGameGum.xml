<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGameGum</name>
    </assembly>
    <members>
        <member name="F:MonoGameGum.Forms.Controls.Button.ButtonCategoryState">
            <summary>
            The name of the Category containing visual states for the Button object.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.Button.Text">
            <summary>
            Text displayed by the button. This property requires that the TextInstance instance be present in the Gum component.
            If the TextInstance instance is not present, an exception will be thrown in DEBUG mode
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.Button.IsEnabled">
            <summary>
            Whether the button is enabled or not. When disabled, the button will not respond to user input, and will display
            a disabled state.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.PopupRoot">
            <summary>
            Container used to hold popups such as the ListBox which appears when clicking on a combo box.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.ModalRoot">
            <summary>
            Container used to hold modal objects. If any object is added to this container, then all other
            UI does not receive events.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.ActualHeight">
            <summary>
            The height in pixels. This is a calculated value considering HeightUnits and Height.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.ActualWidth">
            <summary>
            The width in pixels. This is a calculated value considering WidthUnits and Width;
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.AbsoluteLeft">
            <summary>
            Returns the left of this element in absolute (screen) coordinates
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.AbsoluteTop">
            <summary>
            Returns the top of this element in absolute (screen) coordinates
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.DefaultFormsComponents">
            <summary>
            Contains the default association between Forms Controls and Gum Runtime Types. 
            This dictionary enabled forms controls (like TextBox) to automatically create their own visuals.
            The key in the dictionary is the type of Forms control.
            </summary>
            <remarks>
            This dictionary simplifies working with FlatRedBall.Forms in code. It allows one piece of code 
            (which may be generated by Glue) to associate the Forms controls with a Gum runtime type. Once 
            this association is made, controls can be created without specifying a gum runtime. For example:
            var button = new Button();
            button.Visual.AddToManagers();
            button.Click += HandleButtonClick;
            
            Note that this association is used when instantiating a new Forms type in code, but it is not used when instantiating
            a new Gum runtime type - the Gum runtime must instantiate and associate its Forms object in its own code.
            </remarks>
            <example>
            FrameworkElement.DefaultFormsComponents[typeof(FlatRedBall.Forms.Controls.Button)] = 
                typeof(ProjectName.GumRuntimes.LargeMenuButtonRuntime);
            </example>
        </member>
        <member name="M:MonoGameGum.Forms.Controls.FrameworkElement.CallLoaded">
            <summary>
            Calls the loaded event. This should not be called in custom code, but instead is called by Gum
            </summary>
        </member>
        <member name="M:MonoGameGum.Forms.Controls.FrameworkElement.Show(RenderingLibrary.Graphics.Layer)">
            <summary>
            Displays this element visually and adds it to the underlying managers for Cursor interaction.
            </summary>
            <remarks>
            This is typically only called if the element is instantiated in code. Elements added
            to a Gum screen in Gum will automatically be displayed when the Screen is created, and calling
            this will result in the object being added twice.</remarks>
            <param name="layer">The layer to add this to, can be null to add it directly to managers</param>
        </member>
        <member name="M:MonoGameGum.Forms.Controls.FrameworkElement.Activity">
            <summary>
            Every-frame logic. This will automatically be called if this element is added to the FrameworkElementManager
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.FrameworkElement.IsUsingLeftAndRightGamepadDirectionsForNavigation">
            <summary>
            Whether to use left and right directions as navigation. If false, left and right directions are ignored for navigation.
            </summary>
        </member>
        <member name="M:MonoGameGum.Forms.Controls.FrameworkElement.UpdateState">
            <summary>
            Gets the state according to the element's current properties (such as whether it is enabled) and applies it
            to refresh the Visual's appearance.
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.ScrollIntoViewStyle.BringIntoView">
            <summary>
            Scrolls only if the item is not in view. Scrolls the minimum amount necessary to bring the item into view.
            In other words, if the item is above the visible area, then the scrolling brings the item to the top.
            If the item is below the visible area, then the scrolling brings the item to the bottom.
            If the item is already into view, no scrolling is performed.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.ListBox.LoseListItemFocusOnPrimaryInput">
            <summary>
            Whether the primary input button (usually the A button) results in the highlighted list box item
            being selected and in the ListBox focus moving outside of the individual items.
            </summary>
            <remarks>
            This value is true, but can be changed to false if the A button should perform actions on the highlighted
            list box item (such as toggling a check box) without focus being moved out of the individual items.
            </remarks>
        </member>
        <member name="E:MonoGameGum.Forms.Controls.ListBox.SelectionChanged">
            <summary>
            Event raised whenever the selection changes. The object parameter is the sender (list box) and the SelectionChangedeventArgs
            contains information about the changed selected items.
            </summary>
        </member>
        <member name="E:MonoGameGum.Forms.Controls.ListBox.GenericGamepadButtonPushed">
            <summary>
            Event raised when the user presses a button at the top-level (if the list box has focus, but the individual items do not)
            </summary>
        </member>
        <member name="M:MonoGameGum.Forms.Controls.ListBox.ScrollIntoView(System.Object,MonoGameGum.Forms.Controls.ScrollIntoViewStyle)">
            <summary>
            Scrolls the list view so that the argument item is in view. The amount of scrolling depends on the scrollIntoViewStyle argument.
            </summary>
            <param name="item">The item to scroll into view.</param>
            <param name="scrollIntoViewStyle">The desired location of the item after scrolling.</param>
        </member>
        <member name="E:MonoGameGum.Forms.Controls.Primitives.ButtonBase.Click">
            <summary>
            Event raised when the user pushes, then releases the control.
            This means the cursor is over the button, the button was originally pushed,
            the primary button was pressed last frame, but is no longer pressed this frame.
            The "click" terminology comes from the Cursor's PrimaryClick property.
            </summary>
        </member>
        <member name="E:MonoGameGum.Forms.Controls.Primitives.ButtonBase.Push">
            <summary>
            Event raised when the user pushes on the control. 
            This means the cursor is over the button and the primary button was not pressed last frame, but is pressed this frame.
            The "push" terminology comes from the Cursor's PrimaryPush property.
            </summary>
        </member>
        <member name="M:MonoGameGum.Forms.Controls.Primitives.ButtonBase.#ctor">
            <summary>
            Event raised when any button is pressed on an Xbox360GamePad which is being used by the 
            GuiManager.GamePadsForUiControl.
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.Primitives.RangeBase.cursorGrabOffsetRelativeToThumb">
            <summary>
            Represents the X or Y offset of the cursor relative to the thumb when the thumb was grabbed.
            If the element is horizontal, this is an X value. If the element is vertical, this is a Y value.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.Primitives.RangeBase.Minimum">
            <summary>
            The minimum inclusive value which can be set through the UI.
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.Primitives.RangeBase.Maximum">
            <summary>
            The maximum inclusive value which can be set through the UI.
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.ScrollBarVisibility.Auto">
            <summary>
            The ScrollBar displays only if needed based on the size of the inner panel
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.ScrollBarVisibility.Hidden">
            <summary>
            The ScrollBar remains invisible even if the contents of the inner panel exceed the size of its container
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.ScrollBarVisibility.Visible">
            <summary>
            The ScrollBar always displays
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.TextCompositionEventArgs.Text">
            <summary>
            The new text value.
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.TextWrapping.NoWrap">
            <summary>
            No line wrapping is performed.
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.TextWrapping.Wrap">
            <summary>
            Line-breaking occurs if the line overflows beyond the available block width,
            even if the standard line breaking algorithm cannot determine any line break
            opportunity, as in the case of a very long word constrained in a fixed-width
            container with no scrolling allowed.
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.TextBoxBase.indexPushed">
            <summary>
            The cursor index where the cursor was last pushed, used for drag+select
            </summary>
        </member>
        <member name="P:MonoGameGum.Forms.Controls.TextBoxBase.IsCaretVisibleWhenNotFocused">
            <summary>
            Whether the caret is visible when not focused. If true, the caret will always stay visible even if the TextBox has lost focus.
            </summary>
        </member>
        <member name="F:MonoGameGum.Forms.Controls.TextBoxBase.edgeToTextPadding">
            <summary>
            The maximum distance between the edge of the control and the text.
            Either we will want to make this customizable at some point, or remove
            this value and base it on some value of a parent, like we do for the scroll
            bar. This would require the Text to have a custom parent specifically defining
            the range of the text object.
            </summary>
        </member>
        <member name="E:MonoGameGum.Forms.Controls.ToggleButton.Checked">
            <summary>
            Event raised when the IsChecked value is set to true. Seperate events exist for Indeterminate and Unchecked.
            </summary>
            <remarks>
            The Checked/Indeterminate/Unchecked event pattern follows wpf. For more info, see:
            https://stackoverflow.com/questions/5574613/separate-events-for-checked-and-unchecked-state-of-wpf-checkbox-why
            </remarks>
        </member>
        <member name="E:MonoGameGum.Forms.Controls.ToggleButton.Indeterminate">
            <summary>
            Event raised when the IsChecked value is set to null.
            </summary>
        </member>
        <member name="E:MonoGameGum.Forms.Controls.ToggleButton.Unchecked">
            <summary>
            Event raised when the IsChecked value is set to false;
            </summary>
        </member>
        <member name="M:MonoGameGum.Forms.FormsUtilities.InitializeDefaults">
            <summary>
            Initializes defaults to enable FlatRedBall Forms. This method should be called before using Forms.
            </summary>
            <remarks>
            Projects can make further customization to Forms such as by modifying the FrameworkElement.Root or the DefaultFormsComponents.
            </remarks>
        </member>
        <member name="P:MonoGameGum.Input.Cursor.XChange">
            <summary>
            Returns the screen space (in pixels) change on the X axis since the last frame.
            </summary>
        </member>
        <member name="P:MonoGameGum.Input.Cursor.YChange">
            <summary>
            Returns the screen space (in pixel) change on the Y axis since the last frame.
            </summary>
        </member>
        <member name="M:MonoGameGum.Input.KeyboardStateProcessor.Clear">
            <summary>
            Clears the keyboard states, simulating the keyboard
            not having any values down or pressed
            </summary>
        </member>
        <member name="M:Gum.Wireframe.BbCodeParser.Parse(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Returns a list of FoundTags in the argument text. Only tags in the availableTags set are returned.
            </summary>
            <param name="text">The text populated with tags.</param>
            <param name="availableTags">The available tags for parsing. Tags can be lower-case.</param>
            <returns>The list of found tags.</returns>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationChainListSave.FileRelativeTextures">
            <summary>
            Whether files (usually image files) referenced by this object (and .achx) are
            relative to the .achx itself. If false, then file references will be stored as absolute. 
            If true, then file reference,s will be stored relative to the .achx itself. This value should
            be true so that a .achx can be moved to a different file system or computer and still
            have valid references.
            </summary>
        </member>
        <member name="M:Gum.Content.AnimationChain.AnimationChainListSave.ToAnimationChainList(System.String)">
            <summary>
            Create a "save" object from a regular animation chain list
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationChainSave.ParentFile">
            <summary>
            This is used if the AnimationChain actually comes from 
            a file like a .gif.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.FlipHorizontal">
            <summary>
            Whether the texture should be flipped horizontally.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.FlipVertical">
            <summary>
            Whether the texture should be flipped on the vertidally.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.TextureName">
            <summary>
            Used in XML Serialization of AnimationChains - this should
            not explicitly be set by the user.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.FrameLength">
            <summary>
            The amount of time in seconds the AnimationFrame should be shown for.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.LeftCoordinate">
            <summary>
            The left coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.RightCoordinate">
            <summary>
            The right coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.TopCoordinate">
            <summary>
            The top coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.BottomCoordinate">
            <summary>
            The bottom coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This may be in UV coordinates or pixel coordinates.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.RelativeX">
            <summary>
            The relative X position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:Gum.Content.AnimationChain.AnimationFrameSave.RelativeY">
            <summary>
            The relative Y position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="T:Gum.Graphics.Animation.AnimationChain">
            <summary>
            Represents a collection of AnimationFrames which can be used to perform
            texture flipping animation on IAnimationChainAnimatables such as Sprites.
            </summary>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChain.FrameTime">
            <summary>
            Sets the frame time to every frame in the animation to the value. For example, assigning a FrameTime of .2 will make every frame in the animation last .2 seconds.
            </summary>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChain.LastFrame">
            <summary>
            Gets the last AnimationFrame of the AnimationChain or null if 
            there are no AnimationFrames.
            </summary>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChain.Name">
            <summary>
            The name of the AnimationChain.
            </summary>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChain.TotalLength">
            <summary>
            The total duration of the animation in seconds. This is obtained by adding the FrameTime of all contained frames.
            </summary>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationChain.#ctor">
            <summary>
            Creates an empty AnimationChain.
            </summary>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationChain.#ctor(System.Int32)">
            <summary>
            Creates a new AnimationChain with the argument capacity.
            </summary>
            <param name="capacity">Sets the initial capacity.  Used to reduce memory allocation.</param>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationChain.FindByName(System.String)">
            <summary>
            Searches for and returns the AnimationFrame with its Name matching
            the nameToSearchFor argument, or null if none are found.
            </summary>
            <param name="nameToSearchFor">The name of the AnimationFrame to search for.</param>
            <returns>The AnimationFrame with matching name, or null if none exists.</returns>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationChain.FrameToFrame(System.Int32,System.Int32)">
            <summary>
            Returns the shortest absolute number of frames between the two argument frame numbers.  This
            method moves forward and backward and considers looping.
            </summary>
            <param name="frame1">The index of the first frame.</param>
            <param name="frame2">The index of the second frame.</param>
            <returns>The positive or negative number of frames between the two arguments.</returns>
        </member>
        <member name="T:Gum.Graphics.Animation.AnimationChainList">
            <summary>
            A list of AnimationChains.
            </summary>
            <remarks>
            This class is often used by IAnimationChainAnimatables to store a list of
            AnimationChains.  Since the AnimationChainList provides a string indexer, it
            is common to get a reference to an AnimationChain by its name and set it as the
            IAnimationChainAnimatable's current AnimationChain.
            </remarks>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChainList.FileRelativeTextures">
            <summary>
            Gets and sets whether the AnimationChainList will save the 
            Texture2Ds that its AnimationFrames reference with names relative
            to the .achx.  Otherwise, this property is not used during runtime.
            </summary>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChainList.TimeMeasurementUnit">
            <summary>
            Gets or sets the TimeMeasurementUnit.  This defaults to TimeMeasurementUnit.Millisecond and
            should not be changed.  It is included for compatability with older versions of FlatRedBall.
            </summary>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChainList.Name">
            <summary>
            Gets and sets the intance's name.
            </summary>
        </member>
        <member name="P:Gum.Graphics.Animation.AnimationChainList.Item(System.String)">
            <summary>
            Gets the AnimationChain by name.  Returns null if no AnimationChain is found.
            </summary>
            <param name="animationChainName">The name of the AnimationChain to return</param>
            <returns>Reference to the AnimationChain with the specified name.</returns> 
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationChainList.#ctor">
            <summary>
            Instantiates a new AnimationChainList.
            </summary>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationChainList.#ctor(System.Int32)">
            <summary>
            Instantiates a new AnimationChainList.
            </summary>
            <param name="capacity">Sets the initial capacity to reduce memory allocation when subsequently calling Add.</param>
        </member>
        <member name="T:Gum.Graphics.Animation.AnimationFrame">
            <summary>
            Stores information about one frame in a texture-flipping animation.
            </summary>
            <remarks>
            Includes
            information about which Texture2D to show, whether the Texture2D should be flipped,
            the length of time to show the Texture2D for, texture coordinates (for sprite sheets), and
            relative positioning.
            </remarks>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.Empty">
            <summary>
            Empty AnimationFrame.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.Texture">
            <summary>
            The texture that the AnimationFrame will show.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.FlipHorizontal">
            <summary>
            Whether the texture should be flipped horizontally.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.FlipVertical">
            <summary>
            Whether the texture should be flipped on the vertidally.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.TextureName">
            <summary>
            Used in XML Serialization of AnimationChains - this should
            not explicitly be set by the user.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.FrameLength">
            <summary>
            The amount of time in seconds the AnimationFrame should be shown for.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.LeftCoordinate">
            <summary>
            The left coordinate in texture coordinates of the AnimationFrame.  Default is 0. 
            This value is in texture coordinates, not pixels. A value of 1 represents the right-side
            of the texture.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.RightCoordinate">
            <summary>
            The right coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This value is in texture coordinates, not pixels. A value of 1 represents the right-side
            of the texture.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.TopCoordinate">
            <summary>
            The top coordinate in texture coordinates of the AnimationFrame.  Default is 0.
            This value is in texture coordinates, not pixels. A value of 1 represents the bottom
            of the texture;
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.BottomCoordinate">
            <summary>
            The bottom coordinate in texture coordinates of the AnimationFrame.  Default is 1.
            This value is in texture coordinates, not pixels. A value of 1 represents the bottom
            of the texture;
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.RelativeX">
            <summary>
            The relative X position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="F:Gum.Graphics.Animation.AnimationFrame.RelativeY">
            <summary>
            The relative Y position of the object that is using this AnimationFrame.  This
            is only applied if the IAnimationChainAnimatable's UseAnimationRelativePosition is
            set to true.
            </summary>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationFrame.#ctor">
            <summary>
            Creates a new AnimationFrame.
            </summary>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationFrame.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single)">
            <summary>
            Creates a new AnimationFrame.
            </summary>
            <param name="texture">The Texture2D to use for this AnimationFrame.</param>
            <param name="frameLength">The amount of time in seconds that this AnimationFrame will display for when 
            it is used in an AnimationChain.</param>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationFrame.Clone">
            <summary>
            Creates a new AnimationFrame with identical properties.  The new AnimationFrame
            will not belong to the AnimationChain that this AnimationFrameBelongs to unless manually
            added.
            </summary>
            <returns>The new AnimationFrame instance.</returns>
        </member>
        <member name="M:Gum.Graphics.Animation.AnimationFrame.ToString">
            <summary>
            Returns a string representation of this.
            </summary>
            <returns>String representation of this.</returns>
        </member>
        <member name="T:RenderingLibrary.Content.ContentLoader">
            <summary>
            Provides a simple implementation of IContentLoader for applications
            using the LoaderManager and not specifying their own custom ContentLoader.
            This content loader uses the default SystemManagers internally.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Content.ContentLoader.LoadTextureFromFile(System.String,RenderingLibrary.SystemManagers)">
            <summary>
            Performs a no-caching load of the texture. This will always go to disk to access a file and 
            will always return a unique Texture2D. This should not be used in most cases, as caching is preferred
            </summary>
            <param name="fileName">The filename to load</param>
            <param name="managers">The optional SystemManagers to use when loading the file to obtain a GraphicsDevice</param>
            <returns>The loaded Texture2D</returns>
        </member>
        <member name="F:RenderingLibrary.Graphics.BitmapCharacterInfo.XOffset">
            <summary>
            The offset of the character when drawn from the current X position. This value lets
            a character get drawn further to the right or left without changing the X position of the
            next character.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.ReAssignTextures">
            <summary>
            Loops through all internally-stored texture names and reloads the textures.
            Note, this does not clear any internal caches, so if these textures are cached,
            the cache will be used.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.RenderToTexture2D(System.Collections.Generic.List{System.String},RenderingLibrary.Graphics.HorizontalAlignment,RenderingLibrary.SystemManagers,Microsoft.Xna.Framework.Graphics.Texture2D,System.Object,System.Nullable{System.Int32},System.Single)">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="horizontalAlignment"></param>
            <param name="managers"></param>
            <param name="toReplace"></param>
            <param name="objectRequestingRender"></param>
            <param name="numberOfLettersToRender">The maximum number of characters to render.</param>
            <returns></returns>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.DrawTextLines(System.Collections.Generic.List{System.String},RenderingLibrary.Graphics.HorizontalAlignment,System.Object,System.Int32,System.Collections.Generic.List{System.Int32},RenderingLibrary.Graphics.SpriteRenderer,System.Drawing.Color,System.Single,System.Single,System.Single,System.Single,System.Single,System.Nullable{System.Int32},System.Nullable{RenderingLibrary.Graphics.TextRenderingPositionMode},System.Single)">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="horizontalAlignment"></param>
            <param name="objectRequestingChange"></param>
            <param name="requiredWidth"></param>
            <param name="widths"></param>
            <param name="spriteRenderer"></param>
            <param name="color"></param>
            <param name="xOffset"></param>
            <param name="yOffset"></param>
            <param name="rotation"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="numberOfLettersToRender"></param>
            <param name="overrideTextRenderingPositionMode"></param>
            <param name="lineHeightMultiplier"></param>
            <returns>The rectangle of the drawn text. This will return the same value regardless of alignment.</returns>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.RenderAtlasedTextureToScreen(System.Collections.Generic.List{System.String},RenderingLibrary.Graphics.HorizontalAlignment,System.Single,System.Drawing.Color,System.Single,System.Single,RenderingLibrary.SystemManagers,RenderingLibrary.Graphics.SpriteRenderer,System.Object)">
            <summary>
            Used for rendering directly to screen with an atlased texture.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.GetCharacterRect(System.Char,System.Int32,System.Numerics.Vector2@,RenderingLibrary.Math.FloatRectangle@,System.Int32@,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="lineNumber"></param>
            <param name="currentCharacterDrawPosition">When passed in, this is the point used to draw the current character. This is used to set the destinationRectangle. This value is modified, increasing the position by XAdvance.</param>
            <param name="destinationRectangle"></param>
            <param name="pageIndex"></param>
            <param name="fontScale"></param>
            <param name="lineHeightMultiplier"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.GetRequiredWidthAndHeight(System.Collections.Generic.List{System.String},System.Int32@,System.Int32@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns the width and height required to render the argument line of text.
            </summary>
            <param name="lines">The lines of text, where each entry is one line of text.</param>
            <param name="requiredWidth">The required width returned by this method.</param>
            <param name="requiredHeight">The required height returned by this method.</param>
            <param name="widths">The widths of the individual lines.</param>
        </member>
        <member name="M:RenderingLibrary.Graphics.BitmapFont.MeasureString(System.String)">
            <summary>
            Returns the number of pixels (horizontally) required to render the argument string.
            </summary>
            <param name="line">The line of text.</param>
            <returns>The number of pixels needed to render this text horizontally.</returns>
        </member>
        <member name="M:RenderingLibrary.Graphics.ImageData.RemoveRow(System.Int32)">
            <summary>
            Removes the index row from the contained data.  Row 0 is the top of the texture.
            </summary>
            <param name="rowToRemove">The index of the row to remove.  Index 0 is the top row.</param>
        </member>
        <member name="M:RenderingLibrary.Graphics.NineSlice.LoadAtlasedTexture(System.String,RenderingLibrary.Graphics.AtlasedTexture)">
            <summary>
            Loads given texture(s) from atlas.
            </summary>
            <param name="valueAsString"></param>
            <param name="atlasedTexture"></param>
        </member>
        <member name="M:RenderingLibrary.Graphics.NineSlice.SetTexturesUsingPattern(System.String,RenderingLibrary.SystemManagers,System.Boolean)">
            <summary>
            
            </summary>
            <param name="anyOf9Textures"></param>
            <param name="managers"></param>
            <param name="inAtlas">True if textures are atlased.</param>
        </member>
        <member name="F:RenderingLibrary.Graphics.Renderer.RenderUsingHierarchy">
            <summary>
            Whether renderable objects should call Render
            on contained children. This is true by default, 
            results in a hierarchical rendering order.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Renderer.SinglePixelTexture">
            <summary>
            The texture used to render solid objects. If SinglePixelSourceRectangle is null, the entire texture is used. Otherwise
            the portion of SinglePixelTexture is applied.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Graphics.Renderer.SinglePixelSourceRectangle">
            <summary>
            The rectangle to use when rendering single-pixel texture objects, such as ColoredRectangles.
            By default this is null, indicating the entire texture is used.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Renderer.NormalBlendState">
            <summary>
            Controls which XNA BlendState is used for the Rendering Library's Blend.Normal value.
            </summary>
            <remarks>
            This should be either NonPremultiplied (if textures do not use premultiplied alpha), or
            AlphaBlend if using premultiplied alpha textures.
            </remarks>
        </member>
        <member name="P:RenderingLibrary.Graphics.Renderer.UseCustomEffectRendering">
            <summary>
            Use the custom effect for rendering. This setting takes priority if 
            both UseCustomEffectRendering and UseBasicEffectRendering are enabled.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Renderer.LinearizeTextures">
            <summary>
            When this is enabled texture colors will be translated to linear space before 
            any other shader operations are performed. This is useful for games with 
            lighting and other special shader effects. If the colors are left in gamma 
            space the shader calculations will crush the colors and not look like natural 
            lighting. Delinearization must be done by the developer in the last render 
            step when rendering to the screen. This technique is called gamma correction.
            Requires using the custom effect. Disabled by default.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.Renderer.ForceEnd">
            <summary>
            Ends the current SpriteBatchif it hasn't yet been ended. This is needed for projects which may need the
            rendering to end itself so that they can start sprite batch.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Sprite.EffectiveRectangle">
            <summary>
            Returns the effective source rectangle, which may be the same as the SourceRectangle unless an AtlasedTexture is used.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Graphics.InlineVariable.VariableName">
            <summary>
            Variable name, such as "Font". This translates to the left-side of the assignment in the tag. For example
            [Font=Arial] would have a VariableName of "Font".
            </summary>
        </member>
        <member name="F:RenderingLibrary.Graphics.InlineVariable.StartIndex">
            <summary>
            The start index of the tag in the "stripped" text (after all tags have been removed).
            </summary>
        </member>
        <member name="F:RenderingLibrary.Graphics.InlineVariable.CharacterCount">
            <summary>
            The number of characters covered by this inline variable. This is the character count on the "stripped" text.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Text.DefaultBitmapFont">
            <summary>
            The default BitmapFont to use if a Text instance is referencing a null font.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Graphics.Text.mPreRenderWidth">
            <summary>
            Stores the width of the text object's texture before it has had a chance to render, not including
            the FontScale.
            </summary>
            <remarks>
            A text object may need to be positioned according to its dimensions. Normally this would
            use a text's render target texture. In some situations (before the render pass has occurred,
            or when using character-by-character rendering), the text may not have a render target texture.
            Therefore, the pre-rendered values provide size information.
            </remarks>
        </member>
        <member name="F:RenderingLibrary.Graphics.Text.mPreRenderHeight">
            <summary>
            Stores the height of the text object's texture before it has had a chance to render, not including
            the FontScale.
            </summary>
            <remarks>
            See mPreRenderWidth for more information about this member.
            </remarks>
        </member>
        <member name="P:RenderingLibrary.Graphics.Text.WrappedTextWidth">
            <summary>
            The width needed to display the wrapped text. 
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Text.MaxLettersToShow">
            <summary>
            The maximum letters to display. This can be used to 
            create an effect where the text prints out letter-by-letter.
            </summary>
        </member>
        <member name="P:RenderingLibrary.Graphics.Text.StoredMarkupText">
            <summary>
            Stores the markup text including BBCode. This should not be
            directly set outside of custom property assignments since setting
            it directly does not update the RawText, WrappedText, or InlineVariables.
            This only exists to make it easier for the code that creates InlineVariables
            to use this.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Graphics.SolidRectangle.GetAtlasedTexture">
            <summary>
            Checks if the Colored Rectangle texture is located in a loaded atlas.
            </summary>
            <returns>Returns atlased texture if it exists.</returns>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePolygon.IsPointInside(System.Single,System.Single)">
            <summary>
            Returns whether the world X, Y values are inside of the polygon.
            </summary>
            <param name="worldX">The coordinate in world coordinates.</param>
            <param name="worldY"></param>
            <returns>Whether the argument x,y values are inside of the polygon.</returns>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePolygon.PointAt(System.Int32)">
            <summary>
            Returns the X,Y of the point at the argument index in object space (relative to the object's position)
            </summary>
            <param name="index">The 0-based index.</param>
            <returns>The position of the point at the argument index in object space.</returns>
        </member>
        <member name="P:RenderingLibrary.Math.Geometry.LinePrimitive.BreakIntoSegments">
            <summary>
            Determines whether the line is broken up into separate segments or
            if it should be treated as one continual line.  This defaults to false.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.mVectors">
            <summary>
            The list of points relative to the LinePrimitive (in object space)
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.Color">
            <summary>
            Gets/sets the color of the primitive line object.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.Position">
            <summary>
            Gets/sets the position of the primitive line object.
            </summary>
        </member>
        <member name="F:RenderingLibrary.Math.Geometry.LinePrimitive.Depth">
            <summary>
            Gets/sets the render depth of the primitive line object (0 = front, 1 = back)
            </summary>
        </member>
        <member name="P:RenderingLibrary.Math.Geometry.LinePrimitive.VectorCount">
            <summary>
            Gets the number of vectors which make up the primtive line object.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Creates a new primitive line object.
            </summary>
            <param name="singlePixelTexture">The texture to use when rendering the line.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Add(System.Numerics.Vector2)">
            <summary>
            Adds a vector to the LinePrimitive object. The position is relative to the position of the LinePrimitive (object space)
            </summary>
            <param name="vector">The vector to add.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Add(System.Single,System.Single)">
            <summary>
            Adds a vector to the LinePrimitive object.
            </summary>
            <param name="x">The X position of the new point.</param>
            <param name="y">The Y position of the new point.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Insert(System.Int32,System.Numerics.Vector2)">
            <summary>
            Insers a vector into the primitive line object.
            </summary>
            <param name="index">The index to insert it at.</param>
            <param name="vector">The vector to insert.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Remove(System.Numerics.Vector2)">
            <summary>
            Removes a vector from the primitive line object.
            </summary>
            <param name="vector">The vector to remove.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.RemoveAt(System.Int32)">
            <summary>
            Removes a vector from the primitive line object.
            </summary>
            <param name="index">The index of the vector to remove.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Replace(System.Int32,System.Numerics.Vector2)">
            <summary>
            Replaces a vector at the given index with the argument Vector2.
            </summary>
            <param name="index">What index to replace.</param>
            <param name="whatToReplaceWith">The new vector that will be placed at the given index</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.ClearVectors">
            <summary>
            Clears all vectors from the primitive line object.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.Render(RenderingLibrary.Graphics.SpriteRenderer,RenderingLibrary.SystemManagers)">
            <summary>
            Renders the primtive line object.
            </summary>
            <param name="spriteRenderer">The sprite renderer to use to render the primitive line object.</param>
        </member>
        <member name="M:RenderingLibrary.Math.Geometry.LinePrimitive.CreateCircle(System.Single,System.Int32)">
            <summary>
            Creates a circle starting from 0, 0.
            </summary>
            <param name="radius">The radius (half the width) of the circle.</param>
            <param name="sides">The number of sides on the circle (the more the detailed).</param>
        </member>
        <member name="P:RenderingLibrary.Math.Geometry.LineRectangle.LocalVisible">
            <summary>
            This is similar to the Visible property, but affects only this.
            This allows LineRectangles to not render without making their children invisible.
            </summary>
        </member>
        <member name="M:RenderingLibrary.Math.MathFunctions.RoundToInt(System.Single)">
            <summary>
            Rounds the float to the nearest int, using MidpointRounding.AwayFromZero.
            </summary>
            <param name="floatToRound">The float to round.</param>
            <returns>The rounded int.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the float is NaN (not a number)</exception>
        </member>
        <member name="M:RenderingLibrary.Math.MathFunctions.RotatePointAroundPoint(System.Drawing.Point,System.Drawing.Point@,System.Single)">
            <summary>
            Rotates a Point around another Point by a given number of radians.
            </summary>
            <param name="basePoint">Point to rotate around.</param>
            <param name="pointToRotate">Point to rotate (changes position).</param>
            <param name="radiansToChangeBy">Radians to rotate by.</param>
        </member>
        <member name="M:RenderingLibrary.Math.MathFunctions.RotateVector(System.Numerics.Vector2@,System.Single)">
            <summary>
            Rotates (and modifies) the argument vector2 by the argument radians, where a positive value is clockwise.
            </summary>
            <param name="vector2">The vector to rotate.</param>
            <param name="radians">The radians to rotate counterclockwise.</param>
        </member>
        <member name="P:RenderingLibrary.SystemManagers.GlobalFontScale">
            <summary>
            The font scale value. This can be used to scale all fonts globally, 
            generally in response to a font scaling value like the Android font scale setting.
            </summary>
        </member>
        <member name="M:RenderingLibrary.SystemManagers.Activity(System.Double)">
            <summary>
            Performs every-frame activity for all contained systems in the SystemManager.
            </summary>
            <param name="currentTime">The amount of time that has passed since the game started.</param>
            <exception cref="T:System.InvalidOperationException">Exception thrown if the SystemManagers hasn't yet been initialized.</exception>
        </member>
    </members>
</doc>
