<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:themes="clr-namespace:FlatRedBall.Glue.Themes"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">
    
    <ControlTemplate x:Key="DefaultButtonBaseTemplate" TargetType="{x:Type ButtonBase}">
        <Border
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:FrbButton.BorderCornerRadius)}"
        >
            <ContentPresenter x:Name="ContentContainer"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              TextElement.FontFamily="{TemplateBinding FontFamily}"
                              TextElement.FontSize="{TemplateBinding FontSize}"
                              TextElement.Foreground="{TemplateBinding Foreground}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}">
                <ContentPresenter.Resources>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}" />
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="IconButtonBaseTemplate" TargetType="{x:Type ButtonBase}">
        <Border
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:FrbButton.BorderCornerRadius)}"
        >
            <ContentPresenter x:Name="ContentContainer"
                              SnapsToDevicePixels="True"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              RenderTransformOrigin="0.5,0.5"
                              
            />
        </Border>
    </ControlTemplate>

    <Style x:Key="IconButton" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style TargetType="{x:Type materialDesign:PackIcon}">
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Foreground}"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template" Value="{StaticResource IconButtonBaseTemplate}"/>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="themes:FrbButton.BorderCornerRadius" Value="64"></Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary.Dark}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource IconButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Frb.Brushes.Primary.Light}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--<Style x:Key="IconToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource IconButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesign.Brush.Primary}"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->

</ResourceDictionary>